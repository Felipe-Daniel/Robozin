FUNCTION_BLOCK BulletControllerRules
VAR_INPUT
    accuracy_percentage : REAL; // Fuzzified input variable
    my_energy : REAL; // Fuzzified input variable
    enemy_energy : REAL; // Fuzzified input variable
    enemy_distance : REAL; // Fuzzified input variable
END_VAR

VAR_OUTPUT
    bullet_power : REAL; // Fuzzified output variable
END_VAR

FUZZIFY accuracy_percentage
    TERM low := (0, 0) (0.1, 1) (0.2, 0);
    TERM medium := (0.1, 0) (0.2, 1) (0.4, 0);
    TERM high := (0.2, 0) (0.4, 1) (0.5, 0);
END_FUZZIFY

FUZZIFY my_energy
    TERM low := (0, 0) (20, 1) (30, 0);
    TERM medium := (20, 0) (30, 1) (50, 0);
    TERM high := (30, 0) (50, 1) (100, 0);
END_FUZZIFY

FUZZIFY enemy_energy
    TERM low := (0, 0) (10, 1) (20, 0);
    TERM medium := (10, 0) (20, 1) (30, 0);
    TERM high := (20, 0) (30, 1) (100, 0);
END_FUZZIFY

FUZZIFY enemy_distance
    TERM close := (0, 0) (100, 1) (200, 0);
    TERM medium := (100, 0) (200, 1) (400, 0);
    TERM far := (200, 0) (400, 1) (1000, 0);
END_FUZZIFY

DEFUZZIFY bullet_power
    TERM low := (0, 0) (1, 1) (2, 0);
    TERM medium := (1, 0) (2, 1) (3, 0);
    TERM high := (2, 0) (3, 1) (5, 0);
END_DEFUZZIFY

RULEBLOCK BulletPowerRules
    AND : MIN;
    OR : MAX;
    ACT : MIN;

    RULE 1 : IF accuracy_percentage IS high AND my_energy IS high AND enemy_energy IS high AND enemy_distance IS close THEN bullet_power IS high;
    RULE 2 : IF accuracy_percentage IS high AND my_energy IS high AND enemy_energy IS high AND enemy_distance IS medium THEN bullet_power IS medium;
    RULE 3 : IF accuracy_percentage IS high AND my_energy IS high AND enemy_energy IS high AND enemy_distance IS far THEN bullet_power IS low;

    RULE 4 : IF accuracy_percentage IS high AND my_energy IS high AND enemy_energy IS medium AND enemy_distance IS close THEN bullet_power IS high;
    RULE 5 : IF accuracy_percentage IS high AND my_energy IS high AND enemy_energy IS medium AND enemy_distance IS medium THEN bullet_power IS medium;
    RULE 6 : IF accuracy_percentage IS high AND my_energy IS high AND enemy_energy IS medium AND enemy_distance IS far THEN bullet_power IS low;

END_RULEBLOCK

END_FUNCTION_BLOCK

FUNCTION_BLOCK MovementController

VAR_INPUT
    lateral_velocity : REAL; // Lateral velocity of the enemy robot
    abs_bearing : REAL; // Absolute bearing of the enemy robot
    bullet_power : REAL; // Power of the enemy bullet
    distance : REAL; // Distance between our bot and enemy bot
END_VAR

VAR_OUTPUT
    go_angle : REAL; // Desired movement angle
END_VAR

FUZZIFY lateral_velocity
    TERM negative := (-10, 1) (-5, 1) (0, 0);
    TERM positive := (0, 0) (5, 1) (10, 1);
END_FUZZIFY

FUZZIFY abs_bearing
    TERM left := (-180, 1) (-90, 1) (0, 0);
    TERM right := (0, 0) (90, 1) (180, 1);
END_FUZZIFY

FUZZIFY bullet_power
    TERM low := (0, 1) (1, 1) (2, 0);
    TERM high := (1, 0) (2, 1) (3, 1);
END_FUZZIFY

FUZZIFY distance
    TERM close := (0, 1) (100, 1) (200, 0);
    TERM far := (100, 0) (200, 1) (400, 1);
END_FUZZIFY

DEFUZZIFY go_angle
    METHOD : COG;
    DEFAULT := 0;
    TERM left := (-180, 1) (-90, 1) (0, 0);
    TERM right := (0, 0) (90, 1) (180, 1);
END_DEFUZZIFY

RULEBLOCK movement_rules
    AND : MIN;
    ACT : MIN;
    ACCU : MAX;
    RULE 1 : IF lateral_velocity IS negative AND abs_bearing IS left AND bullet_power IS low AND distance IS close THEN go_angle IS right;
    RULE 2 : IF lateral_velocity IS positive AND abs_bearing IS right AND bullet_power IS high AND distance IS far THEN go_angle IS left;

END_RULEBLOCK

END_FUNCTION_BLOCK


